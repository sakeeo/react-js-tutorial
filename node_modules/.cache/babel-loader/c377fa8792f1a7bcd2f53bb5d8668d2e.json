{"ast":null,"code":"var _jsxFileName = \"/home/sakeeo/Dev/github/simple-app/src/Component/InvinityScroll.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass InvinityScroll extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      loading: false,\n      page: 0,\n      prevY: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getMovies(this.state.page);\n    var options = {\n      root: null,\n      rootMargin: \"0px\",\n      threshold: 1.0\n    };\n    this.observer = new IntersectionObserver(this.handleObserver.bind(this), options);\n    this.observer.observe(this.loadingRef);\n  }\n\n  handleObserver(entities, observer) {\n    const y = entities[0].boundingClientRect.y;\n\n    if (this.state.prevY > y) {\n      const lastMovie = this.state.movies[this.state.movies.length - 1];\n      const curPage = lastMovie.albumId;\n      this.getMovies(curPage);\n      this.setState({\n        page: curPage\n      });\n    }\n\n    this.setState({\n      prevY: y\n    });\n  }\n\n  getMovies(page) {\n    this.setState({\n      loading: true\n    });\n    axios.get(`http://www.omdbapi.com/?apikey=faf7e5bb&s=Batman&page={page}`).then(res => {\n      this.setState({\n        movies: [...this.state.movies, ...res.data]\n      });\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    // Additional css\n    const loadingCSS = {\n      height: \"100px\",\n      margin: \"30px\"\n    }; // To change the loading icon behavior\n\n    const loadingTextCSS = {\n      display: this.state.loading ? \"block\" : \"none\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          minHeight: \"800px\"\n        },\n        children: this.state.movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: movie.poster,\n          height: \"100px\",\n          width: \"200px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadingRef => this.loadingRef = loadingRef,\n        style: loadingCSS,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: loadingTextCSS,\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default InvinityScroll;","map":{"version":3,"sources":["/home/sakeeo/Dev/github/simple-app/src/Component/InvinityScroll.js"],"names":["React","Component","axios","InvinityScroll","constructor","state","movies","loading","page","prevY","componentDidMount","getMovies","options","root","rootMargin","threshold","observer","IntersectionObserver","handleObserver","bind","observe","loadingRef","entities","y","boundingClientRect","lastMovie","length","curPage","albumId","setState","get","then","res","data","render","loadingCSS","height","margin","loadingTextCSS","display","minHeight","map","movie","poster"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass InvinityScroll extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      loading: false,\n      page: 0,\n      prevY: 0\n    };\n  }\n\n  componentDidMount() {\n     this.getMovies(this.state.page);\n     var options = {\n        root: null,\n        rootMargin: \"0px\",\n        threshold: 1.0\n      };\n      this.observer = new IntersectionObserver(\n        this.handleObserver.bind(this),\n        options\n      );\n      this.observer.observe(this.loadingRef);\n    }\n\n    handleObserver(entities, observer) {\n      const y = entities[0].boundingClientRect.y;\n      if (this.state.prevY > y) {\n        const lastMovie = this.state.movies[this.state.movies.length - 1];\n        const curPage = lastMovie.albumId;\n        this.getMovies(curPage);\n        this.setState({\n          page: curPage\n        });\n      }\n        this.setState({\n          prevY: y\n        });\n      }\n\n      getMovies(page) {\n         this.setState({ loading: true });\n         axios\n           .get(`http://www.omdbapi.com/?apikey=faf7e5bb&s=Batman&page={page}`)\n           .then(res => {\n             this.setState({\n               movies: [...this.state.movies, ...res.data] });\n             this.setState({ loading: false });\n           });\n       }\n\n  render() {\n    // Additional css\n   const loadingCSS = {\n     height: \"100px\",\n     margin: \"30px\"\n   };\n     // To change the loading icon behavior\n    const loadingTextCSS = { display: this.state.loading ? \"block\" : \"none\" };\n\n    return (\n      <div className=\"container\">\n        <div style={{ minHeight: \"800px\" }}>\n          {this.state.movies.map(movie => (\n            <img src={movie.poster} height=\"100px\" width=\"200px\" />\n          ))}\n        </div>\n        <div ref={loadingRef => (this.loadingRef = loadingRef)}style={loadingCSS}>\n          <span style={loadingTextCSS}>Loading...</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InvinityScroll;\n"]},"metadata":{},"sourceType":"module"}