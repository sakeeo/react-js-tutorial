{"ast":null,"code":"var _jsxFileName = \"/home/sakeeo/Dev/github/react-js-tutorial/src/Tutorial/Invinityscroll.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useCallback } from 'react';\nimport MovieSearch from \"./MovieSerach\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Invinityscroll() {\n  _s();\n\n  const [query, setQuery] = useState('');\n  const [pageNumber, setPageNumber] = useState(1);\n  const {\n    books,\n    error,\n    loading,\n    hasMore\n  } = MovieSearch(query, pageNumber);\n  const observer = useRef();\n  const lastBookElementRef = useCallback(node => {\n    if (loading) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        console.log(\"visible\");\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, hasMore]);\n\n  function handleSearch(e) {\n    setQuery(e.target.value);\n    setPageNumber(1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: query,\n      onChange: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), books.map((book, index) => {\n      if (books.length === index + 1) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: lastBookElementRef,\n          children: book\n        }, book, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 24\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: book\n        }, book, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 24\n        }, this);\n      }\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loading && \"loading ..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error && \"error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Invinityscroll, \"l4IIhqoBOt3svf6TJvG4iluNuuw=\");\n\n_c = Invinityscroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"Invinityscroll\");","map":{"version":3,"sources":["/home/sakeeo/Dev/github/react-js-tutorial/src/Tutorial/Invinityscroll.js"],"names":["useState","useRef","useCallback","MovieSearch","Invinityscroll","query","setQuery","pageNumber","setPageNumber","books","error","loading","hasMore","observer","lastBookElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","console","log","observe","handleSearch","e","target","value","map","book","index","length"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,MAAlB,EAA0BC,WAA1B,QAA4C,OAA5C;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,eAAe,SAASC,cAAT,GAAyB;AAAA;;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,CAAD,CAA5C;AAEA,QAAM;AACJS,IAAAA,KADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA;AAJI,MAKHT,WAAW,CAACE,KAAD,EAAOE,UAAP,CALd;AAOA,QAAMM,QAAQ,GAAGZ,MAAM,EAAvB;AACA,QAAMa,kBAAkB,GAAGZ,WAAW,CAACa,IAAI,IAAI;AAC7C,QAAGJ,OAAH,EAAY;AACZ,QAAGE,QAAQ,CAACG,OAAZ,EAAqBH,QAAQ,CAACG,OAAT,CAAiBC,UAAjB;AACrBJ,IAAAA,QAAQ,CAACG,OAAT,GAAmB,IAAIE,oBAAJ,CAAyBC,OAAO,IAAE;AACnD,UAAGA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAd,EAA6B;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD;AACF,KAJkB,CAAnB;AAKA,QAAGP,IAAH,EAASF,QAAQ,CAACG,OAAT,CAAiBO,OAAjB,CAAyBR,IAAzB;AACV,GATqC,EASpC,CAACJ,OAAD,EAASC,OAAT,CAToC,CAAtC;;AAWA,WAASY,YAAT,CAAsBC,CAAtB,EAAwB;AACtBnB,IAAAA,QAAQ,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACAnB,IAAAA,aAAa,CAAC,CAAD,CAAb;AACD;;AAGD,sBACI;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEH,KAA1B;AAAiC,MAAA,QAAQ,EAAEmB;AAA3C;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKf,KAAK,CAACmB,GAAN,CAAU,CAACC,IAAD,EAAMC,KAAN,KAAgB;AACzB,UAAGrB,KAAK,CAACsB,MAAN,KAAiBD,KAAK,GAAC,CAA1B,EAA4B;AAC1B,4BAAO;AAAK,UAAA,GAAG,EAAEhB,kBAAV;AAAA,oBAA0Ce;AAA1C,WAAmCA,IAAnC;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFD,MAEO;AACL,4BAAO;AAAA,oBAAiBA;AAAjB,WAAUA,IAAV;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;AAEF,KAPA,CAFL,eAUI;AAAA,gBAAMlB,OAAO,IAAI;AAAjB;AAAA;AAAA;AAAA;AAAA,YAVJ,eAWI;AAAA,gBAAMD,KAAK,IAAI;AAAf;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA,kBADJ;AAeH;;GA5CuBN,c;;KAAAA,c","sourcesContent":["import {useState, useRef, useCallback} from 'react'\nimport MovieSearch from \"./MovieSerach\";\n\nexport default function Invinityscroll(){\n    const [query, setQuery] = useState('') \n    const [pageNumber, setPageNumber] = useState(1)\n    \n    const {\n      books,\n      error,\n      loading,\n      hasMore\n    } =MovieSearch(query,pageNumber)\n    \n    const observer = useRef()\n    const lastBookElementRef = useCallback(node => {\n      if(loading) return\n      if(observer.current) observer.current.disconnect()\n      observer.current = new IntersectionObserver(entries=>{\n        if(entries[0].isIntersecting){\n          console.log(\"visible\")\n        }\n      })\n      if(node) observer.current.observe(node)\n    },[loading,hasMore])\n    \n    function handleSearch(e){\n      setQuery(e.target.value)\n      setPageNumber(1)\n    }\n    \n    \n    return(\n        <>\n            <input type='text' value={query} onChange={handleSearch}></input>\n            {books.map((book,index) => {\n              if(books.length === index+1){\n                return <div ref={lastBookElementRef} key={book}>{book}</div>\n              } else {\n                return <div key={book}>{book}</div>\n              }\n              \n            })}\n            <div>{loading && \"loading ..\"}</div>\n            <div>{error && \"error\"}</div>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}