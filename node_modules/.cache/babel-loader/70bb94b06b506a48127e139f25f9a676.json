{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nexport default function useMovieSearch(query, pageNumber) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [movies, setMovies] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  useEffect(() => {\n    setMovies([]);\n  }, [query]);\n  useEffect(() => {\n    if (query.length > 2) {\n      setLoading(true);\n      setError(false);\n      let cancel;\n      axios({\n        method: 'GET',\n        url: 'http://www.omdbapi.com?apikey=faf7e5bb',\n        params: {\n          s: query,\n          page: pageNumber\n        },\n        cancelToken: new axios.CancelToken(c => cancel = c)\n      }).then(res => {\n        setMovies(prevMovies => {\n          return [...new Set([...prevMovies, ...res.data.Search.map(b => b.Title)])];\n        });\n        setHasMore(res.data.Search.length > 0);\n        setLoading(false);\n      }).catch(e => {\n        if (axios.isCancel(e)) return;\n        setError(true);\n      });\n      return () => cancel();\n    }\n  }, [query, pageNumber]);\n  return {\n    loading,\n    error,\n    movies,\n    hasMore\n  };\n}\n\n_s(useMovieSearch, \"PZBdoqEy748sESPMwzmoEDQiuno=\");","map":{"version":3,"sources":["/home/sakeeo/Dev/github/react-js-tutorial/src/Component/useMovieSearch.js"],"names":["useEffect","useState","axios","useMovieSearch","query","pageNumber","loading","setLoading","error","setError","movies","setMovies","hasMore","setHasMore","length","cancel","method","url","params","s","page","cancelToken","CancelToken","c","then","res","prevMovies","Set","data","Search","map","b","Title","catch","e","isCancel"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,UAA/B,EAA2C;AAAA;;AACxD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAFQ,EAEN,CAACP,KAAD,CAFM,CAAT;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AAEd,QAAGI,KAAK,CAACU,MAAN,GAAe,CAAlB,EAAoB;AAChBP,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,UAAIM,MAAJ;AACAb,MAAAA,KAAK,CAAC;AACJc,QAAAA,MAAM,EAAE,KADJ;AAEJC,QAAAA,GAAG,EAAE,wCAFD;AAGJC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,CAAC,EAAEf,KAAL;AAAYgB,UAAAA,IAAI,EAAEf;AAAlB,SAHJ;AAIJgB,QAAAA,WAAW,EAAE,IAAInB,KAAK,CAACoB,WAAV,CAAsBC,CAAC,IAAIR,MAAM,GAAGQ,CAApC;AAJT,OAAD,CAAL,CAKGC,IALH,CAKQC,GAAG,IAAI;AACbd,QAAAA,SAAS,CAACe,UAAU,IAAI;AACtB,iBAAO,CAAC,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAGD,UAAJ,EAAgB,GAAGD,GAAG,CAACG,IAAJ,CAASC,MAAT,CAAgBC,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACC,KAA3B,CAAnB,CAAR,CAAJ,CAAP;AACD,SAFQ,CAAT;AAGAnB,QAAAA,UAAU,CAACY,GAAG,CAACG,IAAJ,CAASC,MAAT,CAAgBf,MAAhB,GAAyB,CAA1B,CAAV;AACAP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAXD,EAWG0B,KAXH,CAWSC,CAAC,IAAI;AACZ,YAAIhC,KAAK,CAACiC,QAAN,CAAeD,CAAf,CAAJ,EAAuB;AACvBzB,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAdD;AAeA,aAAO,MAAMM,MAAM,EAAnB;AACD;AACF,GAvBM,EAuBJ,CAACX,KAAD,EAAQC,UAAR,CAvBI,CAAT;AAwBA,SAAO;AAAEC,IAAAA,OAAF;AAAWE,IAAAA,KAAX;AAAkBE,IAAAA,MAAlB;AAA0BE,IAAAA;AAA1B,GAAP;AACD;;GAnCuBT,c","sourcesContent":["import { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nexport default function useMovieSearch(query, pageNumber) {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n  const [movies, setMovies] = useState([])\n  const [hasMore, setHasMore] = useState(false)\n\n  useEffect(() => {\n    setMovies([])\n  }, [query])\n\n  useEffect(() => {\n    \n    if(query.length > 2){\n        setLoading(true)\n        setError(false)\n        let cancel\n        axios({\n          method: 'GET',\n          url: 'http://www.omdbapi.com?apikey=faf7e5bb',\n          params: { s: query, page: pageNumber },\n          cancelToken: new axios.CancelToken(c => cancel = c)\n        }).then(res => {\n          setMovies(prevMovies => {\n            return [...new Set([...prevMovies, ...res.data.Search.map(b => b.Title)])]\n          })\n          setHasMore(res.data.Search.length > 0)\n          setLoading(false)\n        }).catch(e => {\n          if (axios.isCancel(e)) return\n          setError(true)\n        })\n        return () => cancel()\n      }\n    }, [query, pageNumber])\n  return { loading, error, movies, hasMore }\n}\n"]},"metadata":{},"sourceType":"module"}